const { expect } = require('chai');

/*
Course Name: Javascript Syntax
Section Name: `Функции`

Упражнение на использование функций, тернарного оператора

Description

На курсе по программированию в одной известной школе программирования, для оценки успехов учеников и прогресса
в прохождении курса, необходимо ввести автоматическую систему подсчета баллов. Есть несколько показателей,
которые должны быть включены в общую оценку:
1. Дневные отчеты. Переменная `dailyReports`. За каждый заполненный отчет (один в день) прибавляется по 2 балла.
2. Решенные задачи с сайта codewars.com. Эта переменная называется `katas` и представляет собой уже готовое количество
 баллов, передаваемых c сайта codewars.
3. Отвеченные на интерактивных карточках вопросы. Переменная `flashCards`. Если отвечено 60% или больше
предоставленных на сайте карточек, и количество заполненных дневных отчетов (`dailyReports`) на сайте 80 или больше,
то добавляется 100 баллов. Если одно из этих условий не выполняется, то не добавляется ничего.
4. Законченные на сайте под-курсы этого курса. Переменная `courses`. За каждый полностью пройденный на сайте
под-курс присуждается сразу 200 баллов. Однако если общее количество пройденных под-курсов меньше 2, то все баллы
обнуляются, независимо от заработанных в других областях очков.

Напишите функцию `totalScore`, которая будет подсчитывать общее количество баллов каждого ученика, принимая как аргументы:
- `dailyReports` (количество заполненных дневных отчетов),
- `katas` (готовое количество баллов),
- `flashCards` (в процентах количество сделанных карточек)
- `courses` (количество пройденных под-курсов),

Запишите по крайней мере одно из условий в задаче, используя тернарный оператор.

Приведем пример, который принципиально похож на то, что нужно сделать, но адаптируйте его к требованиям задачи:
```
function fruits (apples, peaches, pears, mangoes) {
  let totalPrice;
  mangoPrice = (mangoes >= 10 ? 8 : 10);
  totalPrice = apples * 5 + peaches * 6 + pears * 4 + mangoes * mangoPrice;
  return totalPrice;
  }
```
*/

// Solution:
function totalScore(dailyReports, katas, flashCards, courses) {
  let result;
  if (courses < 2) return 0;
  result = dailyReports * 2 + katas + courses * 200 + (flashCards >= 60 && dailyReports >= 80 ?  100 : 0);
  return result;
}

// Tests

it('Работает правильно при граничном значении courses', () => {
  expect(totalScore(85, 500, 70, 2)).eq(1170);
});

it('Работает правильно при граничном значении courses', () => {
  expect(totalScore(85, 500, 70, 1)).eq(0);
});

it('Работает правильно при граничном значении dailyReports', () => {
  expect(totalScore(80, 500, 70, 2)).eq(1160);
});

it('Работает правильно при граничном значении dailyReports', () => {
  expect(totalScore(79, 500, 70, 2)).eq(1058);
});

it('Работает правильно при граничном значении flashCards', () => {
  expect(totalScore(90, 500, 60, 2)).eq(1180);
});

it('Работает правильно при граничном значении flashCards', () => {
  expect(totalScore(90, 500, 59, 2)).eq(1080);
});

it('Работает правильно при flashCards удовлетворяющему условию, а dailyReports нет', () => {
  expect(totalScore(50, 400, 90, 2)).eq(900);
});

it('Работает правильно при dailyReports удовлетворяющему условию, а flashCards нет', () => {
  expect(totalScore(90, 400, 50, 2)).eq(980);
});

it('Тип данных возвращаемого результата является числом', () => {
  expect(totalScore(90, 400, 50, 0)).a('number');
});

it('Возвращаемый результат NaN если аргумента нет', () => {
  expect(totalScore()).to.be.NaN;
});

it('Возвращаемый результат NaN если тип одного из аргументов не число', () => {
  expect(totalScore('n', 400, 50, 4)).to.be.NaN;
});

it('Возвращаемый результат NaN если часть аргументов отсутствует', () => {
  expect(totalScore(400, 50)).to.be.NaN;
});

it('Включает тернарный оператор', () => {
  expect(totalScore.toString().includes('?')).to.be.true;
});
